//   Copyright 2023 Benjamin Martin
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group = 'net.lapismc'
archivesBaseName = "LapisSpleef"
version = '3.4.1'
description = 'Classic Spleef for modern Minecraft servers'
sourceCompatibility = '17'
targetCompatibility = '17'
defaultTasks 'clean', 'build', 'shadowJar'

repositories {
    mavenCentral()
    //Spigot Repo
    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/groups/public/')
    }
    //Personal Repo
    maven {
        name = "lapismc-repo"
        url = "https://maven.lapismc.net/repository/maven/"
    }
}

dependencies {
    implementation 'net.lapismc:LapisCore:1.12.11'
    implementation 'org.ocpsoft.prettytime:prettytime:5.0.7.Final'
    compileOnly 'net.lapismc:LapisChat:1.1.2'
    compileOnly "org.spigotmc:spigot-api:1.20.2-R0.1-SNAPSHOT"
}

processResources {
    filter {
        it.replace('${project.version}', project.getVersion())
    }
}

shadowJar {
    archiveFileName.set(archivesBaseName + "-" + project.getVersion() + ".jar")
    exclude 'javax/**'
    relocate("org.ocpsoft.prettytime", "net.lapismc.spleef.util.prettytime")
    relocate("net.lapismc.lapiscore", "net.lapismc.spleef.util.core")
}

javadoc {
    source = sourceSets.main.allJava
    include("net/lapismc/spleef/arena/*.java")
    include("net/lapismc/spleef/util/*.java")
}

tasks.register('javadocJar', Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar, shadowJar
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}